---


const navItems = [
  {
    title: "Inicio",
    label: "inicio",
    url: "/#top",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/#proyectos",
  },
  {
    title: "Sobre m√≠",
    label: "sobre-mi",
    url: "/#sobre-mi",
  },
  {
    title: "Contacto",
    label: "contacto",
    url: "mailto:yossi.juarez12@gmail.com",
  },
]
---

<script>
  function toggleMobileMenu() {
      const mobileMenu = document.getElementById('mobileMenu');
      mobileMenu.classList.toggle('hidden');
  }

  document.addEventListener("DOMContentLoaded", function() {
      const mobileMenuButton = document.getElementById('mobileMenuButton');
      mobileMenuButton.addEventListener('click', toggleMobileMenu);

      const closeButton = document.getElementById('closeButton');
      closeButton.addEventListener('click', toggleMobileMenu);

      const navLinks = document.querySelectorAll('#mobileMenu a');
      navLinks.forEach(link => {
          link.addEventListener('click', () => {
              toggleMobileMenu();
          });
      });
  });
</script>

<header class="flex justify-between items-center py-5 w-full px-4 lg:px-0 xl:w-[1120px] mx-auto">
    <img class="rounded-full size-12" src="/projects/Me1.jpeg" alt="yossdev photo" />
    <nav class="hidden lg:flex flex-row gap-x-10 opacity-80 text-s font-medium text-white-600">
        {
        navItems.map((link) => (
        <a
            class="relative block px-2 py-2 transition hover:text-blue-400"
            aria-label={link.label}
            href={link.url}
        >
            {link.title}
        </a>
        ))
    }
    </nav>
    <!-- Mobile Menu Icon -->
    <button id="mobileMenuButton" onclick="toggleMobileMenu()" class="lg:hidden block text-white focus:outline-none">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M4 6h16M4 12h16m-7 6h7"></path>
        </svg>
    </button>
    <!-- Mobile Menu -->
    <div id="mobileMenu" class="lg:hidden fixed top-0 left-0 w-full h-full bg-purple-800 bg-opacity-30 hidden">
        <div class="flex flex-col justify-center items-center h-screen">
            <div class="bg-purple-700 rounded-lg p-4 shadow-md">
                <button id="closeButton" class="absolute top-2 right-2 text-gray-300 focus:outline-none">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
                {
                navItems.map((link) => (
                <a
                    class="block py-2 text-gray-300 transition hover:text-blue-400"
                    aria-label={link.label}
                    href={link.url}
                    onclick="toggleMobileMenu()"
                >
                    {link.title}
                </a>
                ))
            }
            </div>
        </div>
    </div>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-purple-500")
            } else {
              item.classList.remove("text-purple-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>
